#!/usr/bin/env python
"""
Script para corrigir hist√≥rico inconsistente de migra√ß√µes em produ√ß√£o
Criado para resolver: Migration companies.0009_add_early_access is applied before its dependency companies.0008_alter_resourceusage_options_and_more
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings.production')
django.setup()

from django.db import connection, transaction
from django.db.migrations.recorder import MigrationRecorder
from django.core.management import execute_from_command_line

def fix_migration_history():
    """Corrige o hist√≥rico inconsistente de migra√ß√µes"""
    
    print("üîß [MIGRATION-FIX] Iniciando corre√ß√£o do hist√≥rico de migra√ß√µes...")
    
    try:
        with transaction.atomic():
            recorder = MigrationRecorder(connection)
            
            # Verificar migra√ß√µes aplicadas
            applied_migrations = set(recorder.applied_migrations())
            
            print(f"üìã [MIGRATION-FIX] Migra√ß√µes aplicadas atualmente: {len(applied_migrations)}")
            
            # Verificar se o problema existe
            companies_0008 = ('companies', '0008_alter_resourceusage_options_and_more')
            companies_0009 = ('companies', '0009_add_early_access')
            
            if companies_0009 in applied_migrations and companies_0008 not in applied_migrations:
                print("‚ö†Ô∏è  [MIGRATION-FIX] Problema detectado: 0009 aplicada mas 0008 n√£o est√° no hist√≥rico")
                
                # Verificar se a estrutura da 0008 j√° existe
                with connection.cursor() as cursor:
                    # Verificar se as colunas/mudan√ßas da 0008 j√° existem
                    cursor.execute("""
                        SELECT column_name 
                        FROM information_schema.columns 
                        WHERE table_name = 'companies_resourceusage'
                    """)
                    columns = [row[0] for row in cursor.fetchall()]
                    
                    has_created_at = 'created_at' in columns
                    has_updated_at = 'updated_at' in columns
                    
                    print(f"üìä [MIGRATION-FIX] ResourceUsage tem created_at: {has_created_at}")
                    print(f"üìä [MIGRATION-FIX] ResourceUsage tem updated_at: {has_updated_at}")
                    
                    if has_created_at and has_updated_at:
                        # A estrutura j√° existe, podemos marcar como aplicada
                        recorder.record_applied(companies_0008[0], companies_0008[1])
                        print("‚úÖ [MIGRATION-FIX] Migra√ß√£o 0008 marcada como aplicada no hist√≥rico")
                        
                        # Verificar outras migra√ß√µes pendentes que podem ter depend√™ncias similares
                        other_pending = [
                            ('banking', '0010_add_encrypted_parameter'),
                            ('notifications', '0002_add_event_key'),
                            ('notifications', '0003_cleanup_old_fields'),
                        ]
                        
                        for app, migration in other_pending:
                            migration_tuple = (app, migration)
                            if migration_tuple not in applied_migrations:
                                # Verificar se a estrutura j√° existe para essas migra√ß√µes tamb√©m
                                if app == 'banking' and migration == '0010_add_encrypted_parameter':
                                    cursor.execute("""
                                        SELECT column_name 
                                        FROM information_schema.columns 
                                        WHERE table_name = 'banking_pluggyitem' AND column_name = 'encrypted_parameter'
                                    """)
                                    if cursor.fetchone():
                                        recorder.record_applied(app, migration)
                                        print(f"‚úÖ [MIGRATION-FIX] Migra√ß√£o {app}.{migration} marcada como aplicada")
                                
                                elif app == 'notifications' and migration == '0002_add_event_key':
                                    cursor.execute("""
                                        SELECT column_name 
                                        FROM information_schema.columns 
                                        WHERE table_name = 'notifications_notification' AND column_name = 'event_key'
                                    """)
                                    if cursor.fetchone():
                                        recorder.record_applied(app, migration)
                                        print(f"‚úÖ [MIGRATION-FIX] Migra√ß√£o {app}.{migration} marcada como aplicada")
                                
                                elif app == 'notifications' and migration == '0003_cleanup_old_fields':
                                    # Verificar se campos antigos foram removidos
                                    cursor.execute("""
                                        SELECT column_name 
                                        FROM information_schema.columns 
                                        WHERE table_name = 'notifications_notification' AND column_name = 'notification_type'
                                    """)
                                    if not cursor.fetchone():  # Campo antigo removido
                                        recorder.record_applied(app, migration)
                                        print(f"‚úÖ [MIGRATION-FIX] Migra√ß√£o {app}.{migration} marcada como aplicada")
                        
                        return True
                    else:
                        print("‚ùå [MIGRATION-FIX] Estrutura da 0008 n√£o existe, n√£o √© seguro marcar como aplicada")
                        return False
            else:
                print("‚úÖ [MIGRATION-FIX] Hist√≥rico consistente, nenhuma corre√ß√£o necess√°ria")
                return True
                
    except Exception as e:
        print(f"‚ùå [MIGRATION-FIX] Erro durante corre√ß√£o: {e}")
        return False

def apply_remaining_migrations():
    """Aplica as migra√ß√µes restantes ap√≥s corre√ß√£o do hist√≥rico"""
    
    print("üîÑ [MIGRATION-FIX] Aplicando migra√ß√µes restantes...")
    
    try:
        # Aplicar migra√ß√µes normalmente
        execute_from_command_line(['manage.py', 'migrate', '--verbosity=2'])
        print("‚úÖ [MIGRATION-FIX] Todas as migra√ß√µes aplicadas com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå [MIGRATION-FIX] Erro ao aplicar migra√ß√µes: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    
    print("üöÄ [MIGRATION-FIX] Iniciando corre√ß√£o completa do hist√≥rico de migra√ß√µes")
    
    # Passo 1: Corrigir hist√≥rico
    if not fix_migration_history():
        print("‚ùå [MIGRATION-FIX] Falha na corre√ß√£o do hist√≥rico")
        sys.exit(1)
    
    # Passo 2: Aplicar migra√ß√µes restantes
    if not apply_remaining_migrations():
        print("‚ùå [MIGRATION-FIX] Falha na aplica√ß√£o das migra√ß√µes")
        sys.exit(1)
    
    print("üéâ [MIGRATION-FIX] Corre√ß√£o completa realizada com sucesso!")
    
    # Passo 3: Verificar status final
    try:
        execute_from_command_line(['manage.py', 'showmigrations'])
    except:
        pass  # N√£o falhar se showmigrations der erro

if __name__ == '__main__':
    main()