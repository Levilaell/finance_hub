version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 core.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - ./backend/.env.production
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - db
      - redis
    networks:
      - backend-network
      - frontend-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: celery -A core worker -l info --pool=prefork --concurrency=4
    env_file:
      - ./backend/.env.production
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - db
      - redis
      - backend
    networks:
      - backend-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./backend/.env.production
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.production
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - db
      - redis
      - backend
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://${DOMAIN}/api
      - NEXT_PUBLIC_WS_URL=wss://${DOMAIN}/ws
    networks:
      - frontend-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/nginx-ssl.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - frontend-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Backup service
  backup:
    image: postgres:15-alpine
    restart: always
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h db -U ${DB_USER} ${DB_NAME} | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz;
        find /backups -type f -mtime +7 -delete;
        sleep 86400;
      done"
    depends_on:
      - db
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: